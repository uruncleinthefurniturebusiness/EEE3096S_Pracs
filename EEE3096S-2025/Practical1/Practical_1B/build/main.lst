ARM GAS  /tmp/ccQIG65a.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB42:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include "stm32f0xx.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** #define MAX_ITER 100
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccQIG65a.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** //TODO: Define and initialise the global varibales required
  47:Core/Src/main.c **** /*
  48:Core/Src/main.c ****   start_time
  49:Core/Src/main.c ****   end_time
  50:Core/Src/main.c ****   execution_time 
  51:Core/Src/main.c ****   checksum: should be uint64_t
  52:Core/Src/main.c ****   initial width and height maybe or you might opt for an array??
  53:Core/Src/main.c **** */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** static void MX_GPIO_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  62:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /**
  73:Core/Src/main.c ****   * @brief  The application entry point.
  74:Core/Src/main.c ****   * @retval int
  75:Core/Src/main.c ****   */
  76:Core/Src/main.c **** int main(void)
  77:Core/Src/main.c **** {
  78:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END 1 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Core/Src/main.c ****   HAL_Init();
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE END Init */
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccQIG65a.s 			page 3


  91:Core/Src/main.c ****   /* Configure the system clock */
  92:Core/Src/main.c ****   SystemClock_Config();
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END SysInit */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Initialize all configured peripherals */
  99:Core/Src/main.c ****   MX_GPIO_Init();
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 101:Core/Src/main.c ****   //TODO: Turn on LED 0 to signify the start of the operation
 102:Core/Src/main.c ****   
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   //TODO: Record the start time
 105:Core/Src/main.c ****   
 106:Core/Src/main.c ****   
 107:Core/Src/main.c ****   //TODO: Call the Mandelbrot Function and store the output in the checksum variable defined initia
 108:Core/Src/main.c ****   
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   //TODO: Record the end time
 111:Core/Src/main.c ****   
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   //TODO: Calculate the execution time
 114:Core/Src/main.c ****   
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   //TODO: Turn on LED 1 to signify the end of the operation
 117:Core/Src/main.c ****   
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   //TODO: Hold the LEDs on for a 1s delay
 120:Core/Src/main.c ****   
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   //TODO: Turn off the LEDs
 123:Core/Src/main.c ****   
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* USER CODE END 2 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* Infinite loop */
 128:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 129:Core/Src/main.c ****   while (1)
 130:Core/Src/main.c ****   {
 131:Core/Src/main.c ****     /* USER CODE END WHILE */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 134:Core/Src/main.c ****   }
 135:Core/Src/main.c ****   /* USER CODE END 3 */
 136:Core/Src/main.c **** }
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** /**
 139:Core/Src/main.c ****   * @brief System Clock Configuration
 140:Core/Src/main.c ****   * @retval None
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c **** void SystemClock_Config(void)
 143:Core/Src/main.c **** {
 144:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  /tmp/ccQIG65a.s 			page 4


 148:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 149:Core/Src/main.c ****   */
 150:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 151:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 154:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 155:Core/Src/main.c ****   {
 156:Core/Src/main.c ****     Error_Handler();
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 160:Core/Src/main.c ****   */
 161:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 162:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 163:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 164:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 165:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 168:Core/Src/main.c ****   {
 169:Core/Src/main.c ****     Error_Handler();
 170:Core/Src/main.c ****   }
 171:Core/Src/main.c **** }
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** /**
 174:Core/Src/main.c ****   * @brief GPIO Initialization Function
 175:Core/Src/main.c ****   * @param None
 176:Core/Src/main.c ****   * @retval None
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c **** static void MX_GPIO_Init(void)
 179:Core/Src/main.c **** {
  26              		.loc 1 179 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 88B0     		sub	sp, sp, #32
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 180:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 180 3 view .LVU1
  39              		.loc 1 180 20 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 03A8     		add	r0, sp, #12
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 181:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 182:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 185:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccQIG65a.s 			page 5


  45              		.loc 1 185 3 is_stmt 1 view .LVU3
  46              	.LBB4:
  47              		.loc 1 185 3 view .LVU4
  48              		.loc 1 185 3 view .LVU5
  49 000e 134B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C902     		lsls	r1, r1, #11
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 185 3 view .LVU6
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 0A40     		ands	r2, r1
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 185 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE4:
  62              		.loc 1 185 3 view .LVU8
 186:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 186 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 186 3 view .LVU10
  66              		.loc 1 186 3 view .LVU11
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 8021     		movs	r1, #128
  69 0026 8902     		lsls	r1, r1, #10
  70 0028 0A43     		orrs	r2, r1
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 186 3 view .LVU12
  73 002c 5B69     		ldr	r3, [r3, #20]
  74 002e 0B40     		ands	r3, r1
  75 0030 0293     		str	r3, [sp, #8]
  76              		.loc 1 186 3 view .LVU13
  77 0032 029B     		ldr	r3, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 186 3 view .LVU14
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 189:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  80              		.loc 1 189 3 view .LVU15
  81 0034 0A4C     		ldr	r4, .L2+4
  82 0036 0022     		movs	r2, #0
  83 0038 0321     		movs	r1, #3
  84 003a 2000     		movs	r0, r4
  85 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  86              	.LVL1:
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 */
 192:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  87              		.loc 1 192 3 view .LVU16
  88              		.loc 1 192 23 is_stmt 0 view .LVU17
  89 0040 0323     		movs	r3, #3
  90 0042 0393     		str	r3, [sp, #12]
 193:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  91              		.loc 1 193 3 is_stmt 1 view .LVU18
  92              		.loc 1 193 24 is_stmt 0 view .LVU19
  93 0044 023B     		subs	r3, r3, #2
ARM GAS  /tmp/ccQIG65a.s 			page 6


  94 0046 0493     		str	r3, [sp, #16]
 194:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  95              		.loc 1 194 3 is_stmt 1 view .LVU20
  96              		.loc 1 194 24 is_stmt 0 view .LVU21
  97 0048 0023     		movs	r3, #0
  98 004a 0593     		str	r3, [sp, #20]
 195:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 195 3 is_stmt 1 view .LVU22
 100              		.loc 1 195 25 is_stmt 0 view .LVU23
 101 004c 0693     		str	r3, [sp, #24]
 196:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 102              		.loc 1 196 3 is_stmt 1 view .LVU24
 103 004e 03A9     		add	r1, sp, #12
 104 0050 2000     		movs	r0, r4
 105 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 199:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 200:Core/Src/main.c **** }
 107              		.loc 1 200 1 is_stmt 0 view .LVU25
 108 0056 08B0     		add	sp, sp, #32
 109              		@ sp needed
 110 0058 10BD     		pop	{r4, pc}
 111              	.L3:
 112 005a C046     		.align	2
 113              	.L2:
 114 005c 00100240 		.word	1073876992
 115 0060 00040048 		.word	1207960576
 116              		.cfi_endproc
 117              	.LFE42:
 119              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 120              		.align	1
 121              		.global	calculate_mandelbrot_fixed_point_arithmetic
 122              		.syntax unified
 123              		.code	16
 124              		.thumb_func
 126              	calculate_mandelbrot_fixed_point_arithmetic:
 127              	.LVL3:
 128              	.LFB43:
 201:Core/Src/main.c **** 
 202:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 203:Core/Src/main.c **** //TODO: Mandelbroat using variable type integers and fixed point arithmetic
 204:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 129              		.loc 1 204 96 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 205:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
 134              		.loc 1 205 3 view .LVU27
 206:Core/Src/main.c ****     //TODO: Complete the function implementation
 207:Core/Src/main.c ****     
 208:Core/Src/main.c ****     return mandelbrot_sum;
 135              		.loc 1 208 5 view .LVU28
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** }
ARM GAS  /tmp/ccQIG65a.s 			page 7


 136              		.loc 1 210 1 is_stmt 0 view .LVU29
 137 0000 0020     		movs	r0, #0
 138              	.LVL4:
 139              		.loc 1 210 1 view .LVU30
 140 0002 0021     		movs	r1, #0
 141              	.LVL5:
 142              		.loc 1 210 1 view .LVU31
 143              		@ sp needed
 144 0004 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE43:
 148              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 149              		.align	1
 150              		.global	calculate_mandelbrot_double
 151              		.syntax unified
 152              		.code	16
 153              		.thumb_func
 155              	calculate_mandelbrot_double:
 156              	.LVL6:
 157              	.LFB44:
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 213:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 158              		.loc 1 213 80 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 214:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 163              		.loc 1 214 5 view .LVU33
 215:Core/Src/main.c ****     //TODO: Complete the function implementation
 216:Core/Src/main.c ****     
 217:Core/Src/main.c ****     return mandelbrot_sum;
 164              		.loc 1 217 5 view .LVU34
 218:Core/Src/main.c **** }
 165              		.loc 1 218 1 is_stmt 0 view .LVU35
 166 0000 0020     		movs	r0, #0
 167              	.LVL7:
 168              		.loc 1 218 1 view .LVU36
 169 0002 0021     		movs	r1, #0
 170              	.LVL8:
 171              		.loc 1 218 1 view .LVU37
 172              		@ sp needed
 173 0004 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE44:
 177              		.section	.text.Error_Handler,"ax",%progbits
 178              		.align	1
 179              		.global	Error_Handler
 180              		.syntax unified
 181              		.code	16
 182              		.thumb_func
 184              	Error_Handler:
 185              	.LFB45:
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** /* USER CODE END 4 */
 221:Core/Src/main.c **** 
ARM GAS  /tmp/ccQIG65a.s 			page 8


 222:Core/Src/main.c **** /**
 223:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 224:Core/Src/main.c ****   * @retval None
 225:Core/Src/main.c ****   */
 226:Core/Src/main.c **** void Error_Handler(void)
 227:Core/Src/main.c **** {
 186              		.loc 1 227 1 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ Volatile: function does not return.
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 228:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 229:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 230:Core/Src/main.c ****   __disable_irq();
 192              		.loc 1 230 3 view .LVU39
 193              	.LBB6:
 194              	.LBI6:
 195              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQIG65a.s 			page 9


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccQIG65a.s 			page 10


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 196              		.loc 2 140 27 view .LVU40
 197              	.LBB7:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 198              		.loc 2 142 3 view .LVU41
 199              		.syntax divided
 200              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 201 0000 72B6     		cpsid i
 202              	@ 0 "" 2
 203              		.thumb
 204              		.syntax unified
 205              	.L7:
ARM GAS  /tmp/ccQIG65a.s 			page 11


 206              	.LBE7:
 207              	.LBE6:
 231:Core/Src/main.c ****   while (1)
 208              		.loc 1 231 3 view .LVU42
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****   }
 209              		.loc 1 233 3 view .LVU43
 231:Core/Src/main.c ****   while (1)
 210              		.loc 1 231 9 view .LVU44
 211 0002 FEE7     		b	.L7
 212              		.cfi_endproc
 213              	.LFE45:
 215              		.section	.text.SystemClock_Config,"ax",%progbits
 216              		.align	1
 217              		.global	SystemClock_Config
 218              		.syntax unified
 219              		.code	16
 220              		.thumb_func
 222              	SystemClock_Config:
 223              	.LFB41:
 143:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 224              		.loc 1 143 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 64
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 00B5     		push	{lr}
 229              	.LCFI2:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 14, -4
 232 0002 91B0     		sub	sp, sp, #68
 233              	.LCFI3:
 234              		.cfi_def_cfa_offset 72
 144:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 235              		.loc 1 144 3 view .LVU46
 144:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 236              		.loc 1 144 22 is_stmt 0 view .LVU47
 237 0004 3022     		movs	r2, #48
 238 0006 0021     		movs	r1, #0
 239 0008 04A8     		add	r0, sp, #16
 240 000a FFF7FEFF 		bl	memset
 241              	.LVL9:
 145:Core/Src/main.c **** 
 242              		.loc 1 145 3 is_stmt 1 view .LVU48
 145:Core/Src/main.c **** 
 243              		.loc 1 145 22 is_stmt 0 view .LVU49
 244 000e 1022     		movs	r2, #16
 245 0010 0021     		movs	r1, #0
 246 0012 6846     		mov	r0, sp
 247 0014 FFF7FEFF 		bl	memset
 248              	.LVL10:
 150:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 249              		.loc 1 150 3 is_stmt 1 view .LVU50
 150:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 250              		.loc 1 150 36 is_stmt 0 view .LVU51
 251 0018 0223     		movs	r3, #2
 252 001a 0493     		str	r3, [sp, #16]
 151:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/ccQIG65a.s 			page 12


 253              		.loc 1 151 3 is_stmt 1 view .LVU52
 151:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 254              		.loc 1 151 30 is_stmt 0 view .LVU53
 255 001c 013B     		subs	r3, r3, #1
 256 001e 0793     		str	r3, [sp, #28]
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 257              		.loc 1 152 3 is_stmt 1 view .LVU54
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 258              		.loc 1 152 41 is_stmt 0 view .LVU55
 259 0020 0F33     		adds	r3, r3, #15
 260 0022 0893     		str	r3, [sp, #32]
 153:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 261              		.loc 1 153 3 is_stmt 1 view .LVU56
 154:Core/Src/main.c ****   {
 262              		.loc 1 154 3 view .LVU57
 154:Core/Src/main.c ****   {
 263              		.loc 1 154 7 is_stmt 0 view .LVU58
 264 0024 04A8     		add	r0, sp, #16
 265 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 266              	.LVL11:
 154:Core/Src/main.c ****   {
 267              		.loc 1 154 6 discriminator 1 view .LVU59
 268 002a 0028     		cmp	r0, #0
 269 002c 0DD1     		bne	.L11
 161:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 270              		.loc 1 161 3 is_stmt 1 view .LVU60
 161:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 271              		.loc 1 161 31 is_stmt 0 view .LVU61
 272 002e 0723     		movs	r3, #7
 273 0030 0093     		str	r3, [sp]
 163:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 274              		.loc 1 163 3 is_stmt 1 view .LVU62
 163:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 275              		.loc 1 163 34 is_stmt 0 view .LVU63
 276 0032 0023     		movs	r3, #0
 277 0034 0193     		str	r3, [sp, #4]
 164:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 278              		.loc 1 164 3 is_stmt 1 view .LVU64
 164:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 279              		.loc 1 164 35 is_stmt 0 view .LVU65
 280 0036 0293     		str	r3, [sp, #8]
 165:Core/Src/main.c **** 
 281              		.loc 1 165 3 is_stmt 1 view .LVU66
 165:Core/Src/main.c **** 
 282              		.loc 1 165 36 is_stmt 0 view .LVU67
 283 0038 0393     		str	r3, [sp, #12]
 167:Core/Src/main.c ****   {
 284              		.loc 1 167 3 is_stmt 1 view .LVU68
 167:Core/Src/main.c ****   {
 285              		.loc 1 167 7 is_stmt 0 view .LVU69
 286 003a 0021     		movs	r1, #0
 287 003c 6846     		mov	r0, sp
 288 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 289              	.LVL12:
 167:Core/Src/main.c ****   {
 290              		.loc 1 167 6 discriminator 1 view .LVU70
 291 0042 0028     		cmp	r0, #0
ARM GAS  /tmp/ccQIG65a.s 			page 13


 292 0044 03D1     		bne	.L12
 171:Core/Src/main.c **** 
 293              		.loc 1 171 1 view .LVU71
 294 0046 11B0     		add	sp, sp, #68
 295              		@ sp needed
 296 0048 00BD     		pop	{pc}
 297              	.L11:
 156:Core/Src/main.c ****   }
 298              		.loc 1 156 5 is_stmt 1 view .LVU72
 299 004a FFF7FEFF 		bl	Error_Handler
 300              	.LVL13:
 301              	.L12:
 169:Core/Src/main.c ****   }
 302              		.loc 1 169 5 view .LVU73
 303 004e FFF7FEFF 		bl	Error_Handler
 304              	.LVL14:
 305              		.cfi_endproc
 306              	.LFE41:
 308              		.section	.text.main,"ax",%progbits
 309              		.align	1
 310              		.global	main
 311              		.syntax unified
 312              		.code	16
 313              		.thumb_func
 315              	main:
 316              	.LFB40:
  77:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 317              		.loc 1 77 1 view -0
 318              		.cfi_startproc
 319              		@ Volatile: function does not return.
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 10B5     		push	{r4, lr}
 323              	.LCFI4:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 4, -8
 326              		.cfi_offset 14, -4
  85:Core/Src/main.c **** 
 327              		.loc 1 85 3 view .LVU75
 328 0002 FFF7FEFF 		bl	HAL_Init
 329              	.LVL15:
  92:Core/Src/main.c **** 
 330              		.loc 1 92 3 view .LVU76
 331 0006 FFF7FEFF 		bl	SystemClock_Config
 332              	.LVL16:
  99:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 333              		.loc 1 99 3 view .LVU77
 334 000a FFF7FEFF 		bl	MX_GPIO_Init
 335              	.LVL17:
 336              	.L14:
 129:Core/Src/main.c ****   {
 337              		.loc 1 129 3 view .LVU78
 134:Core/Src/main.c ****   /* USER CODE END 3 */
 338              		.loc 1 134 3 view .LVU79
 129:Core/Src/main.c ****   {
 339              		.loc 1 129 9 view .LVU80
 340 000e FEE7     		b	.L14
ARM GAS  /tmp/ccQIG65a.s 			page 14


 341              		.cfi_endproc
 342              	.LFE40:
 344              		.text
 345              	.Letext0:
 346              		.file 3 "/opt/st/stm32cubeide_1.19.0/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 347              		.file 4 "/opt/st/stm32cubeide_1.19.0/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 348              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 349              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 350              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 351              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 352              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 353              		.file 10 "<built-in>"
ARM GAS  /tmp/ccQIG65a.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccQIG65a.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccQIG65a.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccQIG65a.s:114    .text.MX_GPIO_Init:0000005c $d
     /tmp/ccQIG65a.s:120    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
     /tmp/ccQIG65a.s:126    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
     /tmp/ccQIG65a.s:149    .text.calculate_mandelbrot_double:00000000 $t
     /tmp/ccQIG65a.s:155    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
     /tmp/ccQIG65a.s:178    .text.Error_Handler:00000000 $t
     /tmp/ccQIG65a.s:184    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccQIG65a.s:216    .text.SystemClock_Config:00000000 $t
     /tmp/ccQIG65a.s:222    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccQIG65a.s:309    .text.main:00000000 $t
     /tmp/ccQIG65a.s:315    .text.main:00000000 main

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
